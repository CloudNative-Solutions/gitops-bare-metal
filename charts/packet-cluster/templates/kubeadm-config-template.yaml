---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: {{ .Values.clusterName }}-worker-a
spec:
  template:
    spec:
      joinConfiguration:
        nodeRegistration:
          kubeletExtraArgs:
            cloud-provider: external
            provider-id: 'equinixmetal://{{ "{{ `{{ v1.instance_id }}` }}" }}'
      preKubeadmCommands:
      - |
        sed -ri '/\sswap\s/s/^#?/#/' /etc/fstab
        swapoff -a
        mount -a
        cat <<EOF > /etc/modules-load.d/containerd.conf
        overlay
        br_netfilter
        EOF
        modprobe overlay
        modprobe br_netfilter
        cat <<EOF > /etc/sysctl.d/99-kubernetes-cri.conf
        net.bridge.bridge-nf-call-iptables  = 1
        net.ipv4.ip_forward                 = 1
        net.bridge.bridge-nf-call-ip6tables = 1
        EOF
        sysctl --system
        export DEBIAN_FRONTEND=noninteractive
        apt-get update -y
        apt-get remove -y docker docker-engine containerd runc
        apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release linux-generic jq
        install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        MINOR_KUBERNETES_VERSION=$(echo {{ "{{ .kubernetesVersion }}" }} | cut -d. -f1-2 )
        curl -fsSL https://pkgs.k8s.io/core:/stable:/${MINOR_KUBERNETES_VERSION}/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        chmod a+r /etc/apt/keyrings/docker.gpg
        chmod a+r /etc/apt/keyrings/kubernetes-archive-keyring.gpg
        echo "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" > /etc/apt/sources.list.d/docker.list
        echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/${MINOR_KUBERNETES_VERSION}/deb/ /" > /etc/apt/sources.list.d/kubernetes.list
        apt-get update -y
        TRIMMED_KUBERNETES_VERSION=$(echo {{ "{{ .kubernetesVersion }}" }} | sed 's/\./\\\\./g' | sed 's/^v//')
        RESOLVED_KUBERNETES_VERSION=$(apt-cache madison kubelet | awk -v VERSION=${TRIMMED_KUBERNETES_VERSION} '$3~ VERSION { print $3 }' | head -n1)
        apt-get install -y containerd.io kubelet=${RESOLVED_KUBERNETES_VERSION} kubeadm=${RESOLVED_KUBERNETES_VERSION} kubectl=${RESOLVED_KUBERNETES_VERSION}
        cat  <<EOF > /etc/crictl.yaml
        runtime-endpoint: unix:///run/containerd/containerd.sock
        image-endpoint: unix:///run/containerd/containerd.sock
        EOF
        containerd config default > /etc/containerd/config.toml
        sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
        sed -i "s,sandbox_image.*$,sandbox_image = \"$(kubeadm config images list | grep pause | sort -r | head -n1)\"," /etc/containerd/config.toml
        systemctl restart containerd
